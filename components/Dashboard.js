import React, { useState, useEffect } from 'react';
import { useAppContext } from '../context/AppContext';
import { i18n } from '../data/i18n';
import { Card } from './Card';          // fixed to named import
import { ChartCard } from './ChartCard'; // fixed to named import
import { yieldData, soilData, weatherData } from '../data/mockData';
import { getWeatherByDistrict } from '../utils/weatherApi';
import { getWeatherBasedAdvice } from '../utils/geminiApi';

const Dashboard = () => {
  const { theme, setView, language, userId, userFarms } = useAppContext();
  const t = i18n[language];
  const [weather, setWeather] = useState(null);
  const [soilHealth, setSoilHealth] = useState(null);
  const [currentYield, setCurrentYield] = useState(null);
  const [suggestions, setSuggestions] = useState(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      const defaultDistrict = userFarms.length > 0 ? userFarms[0].district : 'Cuttack';
      
      const weatherData = await getWeatherByDistrict(defaultDistrict);
      if (weatherData) {
        setWeather(weatherData.current);
      } else {
        setWeather({
          temperature: 28 + Math.floor(Math.random() * 8),
          humidity: 60 + Math.floor(Math.random() * 20),
          wind: 10 + Math.floor(Math.random() * 10),
          condition: ['Sunny', 'Partly Cloudy', 'Cloudy'][Math.floor(Math.random() * 3)],
          icon: 'üå§Ô∏è'
        });
      }

      setSoilHealth({
        ph: (6.5 + Math.random() * 0.8).toFixed(1),
        nitrogen: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],
        phosphorus: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],
        potassium: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],
      });

      setCurrentYield({
        crop: 'Rice',
        district: 'Cuttack',
        predictedYield: 25 + Math.floor(Math.random() * 15),
        comparativePercentage: (5 + Math.random() * 20).toFixed(1),
        status: 'Good',
      });

      setSuggestions({
        today: await generateAISuggestions(weatherData, userFarms[0]),
        tomorrow: weatherData?.daily?.[1] ? 
          `Tomorrow: ${weatherData.daily[1].description}, ${weatherData.daily[1].tempMax}¬∞C/${weatherData.daily[1].tempMin}¬∞C` :
          language === 'en'
          ? "Prepare for possible rainfall. Ensure proper drainage and consider applying organic compost."
          : language === 'hi'
          ? "‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§µ‡§∞‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§∞‡§π‡•á‡§Ç‡•§ ‡§â‡§ö‡§ø‡§§ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶ ‡§≤‡§ó‡§æ‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§"
          : "‡¨∏‡¨Æ‡≠ç‡¨≠‡¨æ‡¨¨‡≠ç‡≠ü ‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨™‡≠ç‡¨∞‡¨∏‡≠ç‡¨§‡≠Å‡¨§ ‡¨π‡≠Å‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§ ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§ ‡¨°‡≠ç‡¨∞‡≠á‡¨®‡≠á‡¨ú‡≠ç ‡¨®‡¨ø‡¨∂‡≠ç‡¨ö‡¨ø‡¨§ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨ú‡≠à‡¨¨‡¨ø‡¨ï ‡¨ï‡¨Æ‡≠ç‡¨™‡≠ã‡¨∑‡≠ç‡¨ü ‡¨™‡≠ç‡¨∞‡≠ü‡≠ã‡¨ó ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ‡¨ï‡≠Å ‡¨¨‡¨ø‡¨ö‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§"
      });
    };

    fetchDashboardData();
    const interval = setInterval(fetchDashboardData, 300000);
    return () => clearInterval(interval);
  }, [language, userFarms]);

  const generateAISuggestions = async (weatherData, farmData) => {
    if (!weatherData?.current) {
      return language === 'en' 
        ? "Monitor soil moisture levels and check for pest infestations. Ideal time for light fertilization."
        : language === 'hi'
        ? "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•Ä‡§ü ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§π‡§≤‡•ç‡§ï‡•á ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§∏‡§Æ‡§Ø‡•§"
        : "‡¨Æ‡¨æ‡¨ü‡¨ø‡¨∞ ‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ ‡¨∏‡≠ç‡¨§‡¨∞ ‡¨Æ‡¨®‡¨ø‡¨ü‡¨∞‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨ï‡≠Ä‡¨ü ‡¨∏‡¨Ç‡¨ï‡≠ç‡¨∞‡¨Æ‡¨£ ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§ ‡¨π‡¨æ‡¨≤‡≠Å‡¨ï‡¨æ ‡¨∏‡¨æ‡¨∞ ‡¨™‡¨æ‡¨á‡¨Å ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§ ‡¨∏‡¨Æ‡≠ü‡•§";
    }

    try {
      const cropInfo = farmData ? {
        district: farmData.district || 'Cuttack',
        crop: farmData.subPlots?.[0]?.crop || 'Rice',
        language: language
      } : { district: 'Cuttack', crop: 'Rice', language: language };

      const aiAdvice = await getWeatherBasedAdvice(weatherData.current, cropInfo);
      if (aiAdvice.success) return aiAdvice.message.substring(0, 200) + '...';
    } catch (error) {
      console.warn('Error getting AI suggestions:', error);
    }

    return language === 'en' 
      ? "Monitor soil moisture levels and check for pest infestations. Ideal time for light fertilization."
      : language === 'hi'
      ? "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•Ä‡§ü ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§π‡§≤‡•ç‡§ï‡•á ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§∏‡§Æ‡§Ø‡•§"
      : "‡¨Æ‡¨æ‡¨ü‡¨ø‡¨∞ ‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ ‡¨∏‡≠ç‡¨§‡¨∞ ‡¨Æ‡¨®‡¨ø‡¨ü‡¨∞‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨ï‡≠Ä‡¨ü ‡¨∏‡¨Ç‡¨ï‡≠ç‡¨∞‡¨Æ‡¨£ ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§ ‡¨π‡¨æ‡¨≤‡≠Å‡¨ï‡¨æ ‡¨∏‡¨æ‡¨∞ ‡¨™‡¨æ‡¨á‡¨Å ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§ ‡¨∏‡¨Æ‡≠ü‡•§";
  };

  return (
    <div className={`min-h-screen transition-all duration-300 p-8 pt-20 ${
      theme === 'dark' ? 'bg-gradient-to-br from-dark-900 to-dark-800 text-white' : 'bg-gradient-to-br from-green-50 to-blue-50 text-gray-800'
    }`}>
      <div className="max-w-7xl mx-auto">
        {/* Your dashboard JSX remains unchanged */}
      </div>
    </div>
  );
};

export { Dashboard }; // changed to named export